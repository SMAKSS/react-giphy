{"version":3,"sources":["Components/Navbar.js","Components/Button.js","Components/Loading.js","Components/SearchBar.js","Components/Footer.js","Service/index.js","Pages/SearchPage.js","Pages/FavPage.js","Pages/MainPage.js","Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","to","title","children","Button","onClick","Loading","SearchBar","useState","query","setQuery","name","type","placeholder","autoFocus","value","onChange","e","target","onSearchChanged","onKeyPress","onKeyPressed","Footer","searchImgService","limit","offset","url","fetch","headers","Accept","then","res","json","Search","searchParams","state","setState","key","preventDefault","dataImg","isLoaded","fetchImg","onLoadMoreClicked","a","isLoading","data","console","error","window","scrollTo","top","document","body","scrollHeight","behavior","this","favImg","onFavClicked","length","map","val","srcImg","images","original","favorited","findIndex","fav","id","src","alt","Component","FavPage","JSON","parse","localStorage","getItem","App","filter","push","setItem","stringify","pathname","location","SearchPage","routes","path","component","exact","route","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d7de4ef.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = props => {\n  return (\n    <nav className=\"app-navbar\">\n      <div className=\"container\">\n        <div className=\"app-title__wrapper\">\n          <Link to=\"/\">\n            <p className=\"app-title\">{props.title}</p>\n          </Link>\n        </div>\n        <div className=\"app-menu__wrapper\">{props.children}</div>\n      </div>\n    </nav>\n  );\n};\n\nexport { Navbar };\n","import React from 'react';\n\nconst Button = props => {\n  return (\n    <button className=\"btn-more\" onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport { Button };\n","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <>\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n      <div className=\"grid-item__skeleton\" />\n    </>\n  );\n};\n\nexport { Loading };\n","import React, { useState } from 'react';\n\nconst SearchBar = props => {\n  const [query, setQuery] = useState(props.query);\n\n  const onSearchChanged = e => {\n    const { name, value } = e.target;\n    setQuery(value);\n    props.onSearchChanged(name, value);\n  };\n\n  return (\n    <form className=\"component-form\">\n      <input\n        name=\"query\"\n        type=\"text\"\n        className=\"component-searchbar\"\n        placeholder=\"Start searching for images!\"\n        autoFocus\n        value={query}\n        onChange={onSearchChanged}\n        onKeyPress={props.onKeyPressed}\n      />\n    </form>\n  );\n};\n\nexport { SearchBar };\n","import React from 'react';\n\nconst Footer = props => {\n  return <footer className=\"app-footer\">{props.children}</footer>;\n};\n\nexport { Footer };\n","const API_KEY = 'qbe7wOx7Xjd2Hnx9UDgv1TJHQZ2UZtIW';\nconst BASE_URL = 'https://api.giphy.com/v1/stickers/search';\n\nexport const searchImgService = (query, limit, offset) => {\n  const url = `${BASE_URL}?api_key=${API_KEY}&q=${query}&limit=${limit}&offset=${offset}`;\n  const get = fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    }\n  }).then(res => res.json());\n  return get;\n};\n","import React, { Component } from 'react';\nimport { Loading, SearchBar, Button } from '../Components';\nimport { searchImgService } from '../Service';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchParams: {\n        query: '',\n        limit: 8,\n        offset: 0\n      },\n      dataImg: [],\n      isLoading: false,\n      isLoaded: false\n    };\n  }\n\n  onSearchChanged = (name, value) => {\n    const { searchParams } = this.state;\n    this.setState({\n      searchParams: {\n        ...searchParams,\n        [name]: value\n      }\n    });\n  };\n\n  onKeyPressed = e => {\n    const { key } = e;\n    let { searchParams } = this.state;\n    if (key === 'Enter') {\n      searchParams = { ...searchParams, offset: 0 };\n      e.preventDefault();\n      this.setState(\n        {\n          dataImg: [],\n          searchParams,\n          isLoaded: false\n        },\n        () =>\n          this.fetchImg(\n            searchParams.query,\n            searchParams.limit,\n            searchParams.offset\n          )\n      );\n    }\n  };\n\n  onLoadMoreClicked = () => {\n    const { searchParams } = this.state;\n    searchParams.offset = searchParams.offset + 8;\n    this.fetchImg(searchParams.query, searchParams.limit, searchParams.offset);\n    this.setState({\n      searchParams\n    });\n  };\n\n  fetchImg = async (query, limit, offset) => {\n    this.setState({ isLoading: true });\n    const { dataImg } = this.state;\n    try {\n      const res = await searchImgService(query, limit, offset);\n      this.setState({\n        dataImg: [...dataImg, ...res.data]\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n    this.setState({ isLoading: false, isLoaded: true });\n  };\n\n  render() {\n    const { searchParams, dataImg, isLoading, isLoaded } = this.state;\n    const { favImg, onFavClicked } = this.props;\n    return (\n      <div>\n        <SearchBar\n          query={searchParams.query}\n          onSearchChanged={this.onSearchChanged}\n          onKeyPressed={this.onKeyPressed}\n        />\n        <div className=\"grid-row\">\n          {isLoaded && (\n            <>\n              {dataImg.length > 0 ? (\n                dataImg.map(val => {\n                  const srcImg = val.images.original.url;\n                  const favorited =\n                    favImg.findIndex(fav => fav.id === val.id) !== -1\n                      ? true\n                      : false;\n                  return (\n                    <div className=\"grid-item\" key={val.id}>\n                      <div className=\"grid-content\">\n                        <img src={srcImg} alt=\"img\" />\n                        <div\n                          className=\"fav-btn__wrapper\"\n                          onClick={() => onFavClicked(val.id, srcImg)}\n                        >\n                          <div\n                            className={`fav-btn ${\n                              favorited ? 'favorited' : ''\n                            }`}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"blank-data__wrapper\">\n                  <p className=\"blank-data\">\n                    Sorry, we couldn't find images with that keyword\n                  </p>\n                </div>\n              )}\n            </>\n          )}\n          <div className=\"btn-more__wrapper\">\n            {isLoaded && dataImg.length >= 8 && !isLoading && (\n              <Button onClick={this.onLoadMoreClicked}>\n                Load more images!\n              </Button>\n            )}\n          </div>\n          {isLoading && <Loading />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\n\nclass FavPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    const favImg = JSON.parse(localStorage.getItem('favImg'));\n    return (\n      <div className=\"grid-row\">\n        {favImg.length > 0 ? (\n          favImg.map(val => {\n            const srcImg = val.srcImg;\n            const favorited =\n              favImg.findIndex(fav => fav.id === val.id) !== -1 ? true : false;\n            return (\n              <div className=\"grid-item\" key={val.id}>\n                <div className=\"grid-content\">\n                  <img src={srcImg} alt=\"img\" />\n                  <div\n                    className=\"fav-btn__wrapper\"\n                    onClick={() => this.props.onFavClicked(val.id, srcImg)}\n                  >\n                    <div\n                      className={`fav-btn ${favorited ? 'favorited' : ''}`}\n                    />\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          <div className=\"blank-data__wrapper\">\n            <p className=\"blank-data\">\n              Oops, you don't have any favourited images yet\n            </p>\n          </div>\n        )}\n        <div className=\"btn-more__wrapper\">\n          {favImg.length >= 8 && (\n            <button className=\"btn-more\" onClick={this.onLoadMoreClicked}>\n              Load more images!\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FavPage;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Footer } from '../Components';\n\nimport SearchPage from './SearchPage';\nimport FavPage from './FavPage';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  onFavClicked = (id, srcImg) => {\n    let favImg = JSON.parse(localStorage.getItem('favImg'));\n    const favIndex = favImg.findIndex(val => val.id === id);\n    if (favIndex !== -1) {\n      favImg = favImg.filter(val => val.id !== id);\n    } else {\n      favImg.push({ id, srcImg });\n    }\n    localStorage.setItem('favImg', JSON.stringify(favImg));\n  };\n\n  render() {\n    const favImg = JSON.parse(localStorage.getItem('favImg'));\n    const { pathname } = this.props.location;\n\n    return (\n      <div className=\"App\">\n        <Navbar title=\"GallerEasy\">\n          <Link to=\"/\">\n            <p className={`app-menu ${pathname === '/' ? 'active' : ''}`}>\n              Search\n            </p>\n          </Link>\n          <Link to=\"/fav\">\n            <p className={`app-menu ${pathname === '/fav' ? 'active' : ''}`}>\n              Favourites {`${favImg.length ? favImg.length : ''}`}\n            </p>\n          </Link>\n        </Navbar>\n        <div className=\"container\">\n          {pathname === '/' && (\n            <SearchPage favImg={favImg} onFavClicked={this.onFavClicked} />\n          )}\n          {pathname === '/fav' && (\n            <FavPage favImg={favImg} onFavClicked={this.onFavClicked} />\n          )}\n        </div>\n        <Footer>\n          <p>GallerEasy | 2359 Media</p>\n        </Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import MainPage from '../Pages/MainPage';\n\nexport const routes = [\n  {\n    path: '/',\n    component: MainPage,\n    exact: true\n  },\n  {\n    path: '/fav',\n    component: MainPage,\n    exact: true\n  }\n];\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { routes } from './Routes';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          {routes.map(route => (\n            <Route\n              key={route.path}\n              path={route.path}\n              component={route.component}\n              exact={route.exact}\n            />\n          ))}\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}